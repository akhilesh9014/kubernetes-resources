-----------------------------------------------------------------------------------------------------
pod=container/app    node=vm/localhost-mechine/working-mechine    -n=namespace  -o=output<jaml,json>


basic commands -->
kubectl cluster-info                                 = show the k8s master is running at ip:port
watch kubectl get all -o wide                        = watch the all kubectl componds
                       nginx          LP : CP 
kubectl port-forward <pod-name-id> <8080:80>         = to add the port after access the server
kubectl logs <pod-name-id>                           = show the pod logs
kubectl describe <pod-name-id>                       = to describe/full description/full details of the pods
kubectl describe replicaset < deploy-id > | less     = show the replicaset deploy details
kubectl -n kube-system get pods                      = show all the cluster related details
kubectl create -f <file.yaml>                        = to create pod by using yaml file
kubectl get deployments                              = to list the deployments
kubectl apply -f <file.yaml>                         = to update the deployments ( using previous created yaml file pods)
kubectl set image deployment nginx=nginx:1.9.1       = to see the status of the rollout
kubectl rollout undo <POD-NAME>                          = to rollout the deployments and show
kubectl get replicasets                              = show the status of the pods roll/rollout undo
kubectl rollout history <POD-NAME>                   = to show the history of the rollout-pod
kubectl edit deployments                             = edit the deployment data ( deployed yaml file )
apt-get upgrade -y <pod-name>=1.19.0-00              = upgrade the services 
apt-get upgrade -y kubelet=1.....                    = pugrade service & 
  NOTE: after upgrade service = systemctl restart <kubelet>        & any services 
kubeadm upgrade plan                                 = show the current and available versions in your cluster
kubectl get nodes                                    = to show the all nodes 



----------------------------------------------------------------------------- ------------------------
________________________________________________________________________________________________________________________________________
    CREAT PODS.yaml             # create a pod with multiple containers inside it.
________________________________________________________________________________________________________________________________________
 
 apiVersion: v1
 kind: Pod
 metadata:
    name: nginx
    labels:                                            
      name: nginx
spec:
  containers:                                 }    create multiple containers in single pod like ( nginx,mysql )
  - name: nginx
    image: nginx
    ports:
      -  containerPort: 8080   
  - name: mysql
    image: mysql
   
================================+++++++++      
    resources:
       requests:
         memory: "1Gi"                } resource limits & Exceed Limits
         cpu: 1
       limits:
         memory: "2Gi"
         cpu: 2
     

----------------------------------------------------------------------------------------------------------------------------------------
# kubectl create -f <filename.yaml>
# kubectl get pods
# kubectl get pods --namespace kube-system                                  = show the deatils of the namespaces 
# kubectl run <name of pod> --image=<name of the image from registry        = create single container by using this command
#

----------------------------------------------------------------------------------------------------------------------------------------
________________________________________________________________________________________________________________________________________
  CREATE SERVICES.yaml
________________________________________________________________________________________________________________________________________
      
  
  apiVersion: v1
  kind: Service
  metadata:
      name: myapp-service  
      
  spec:
      type: NodePort
      ports:
       - targetPort: 80    --> pod
         port: 80          --> service port
         nodePort: 30008   --> NODEPORT RANGE: 30000-32767
      selector:
         app: myapp
         type: front-end
         
----------------------------------------------------------------------------------------------------------------------------------------

# kubectl create -f <file-name.yml>      =   to creat the service
# kubectl get services                   =     show the service
# 


----------------------------------------------------------------------------------------------------------------------------------------        
________________________________________________________________________________________________________________________________________
     HOW SCHEDULING WORKS
________________________________________________________________________________________________________________________________________

 apiVersion: v1
 kind: Pod
 metadata:
    name: nginx
    labels:
      name: nginx
spec:
  containers:
  - name: nginx
    image: nginx
    ports:
      -  containerPort: 8080
  nodeName: node01                   --> scheduler to the node01
  
----------------------------------------------------------------------------------------------------------------------------------------
  
  
  
  
---------------------------------------------------------------------------------------------------------------------------------------- 
________________________________________________________________________________________________________________________________________
                                     CREAT REPLICASET.yaml      = set up desired state pods
________________________________________________________________________________________________________________________________________

apiVersion: extensions/v1beta1
kind: ReplicaSet
metadata:
    labels:
      run: nginx
    name: nginx-deploy 
spec:
  replicas: 2
  selector:
    metchLabels
      run: nginx
  template:
    metadata:
      labels:
        run: nginx
    spec:                        #--> specification
       containers:
       - image: nginx
         name: nginx
         
----------------------------------------------------------------------------------------------------------------------------------------
kubectl create -f replicaset.yaml               = creat pods using replicaset.yaml file
kubectl delete pod nginx-replicaset-id          = delete one pod and re-launch automati by replicaset.yaml
kubectl scale deploy <NAME> --replicas=3        = launch one more pod





----------------------------------------------------------------------------------------------------------------------------------------
________________________________________________________________________________________________________________________________________
          nginx-deployment.yaml            = update the pods/rollback
________________________________________________________________________________________________________________________________________

apiVersion: extensions/v1beta1
kind: Deployment
metadata:
    labels:
      run: nginx
    name: nginx-deploy 
spec:
  replicas: 2
  selector:
    metchLabels
      run: nginx
  template:
    metadata:
      labels:
        run: nginx
    spec:                        #--> specification
       containers:
       - image: nginx
         name: nginx
         
---------------------------------------------------------------------------
kubectl create -f deployment.yaml                 = create/deploy pods
kubectl delete pod <NAME>                         = delete pod and auto-launch new pod by deploy.yaml
kubectl describe pod <NAMD>                       = get details/full descripction of the pod






----------------------------------------------------------------------------
______________________________________________________________________________________________________________________________________
     create namespace         # Namespaces help pod-to-pod communication using the same namespace.
______________________________________________________________________________________________________________________________________

apiVersion: v1
kind: Namespce
metadata
   name: elk
   
-------------------------> using namespace in service
apiVersion: v1
kind: Service
metadata:
   name: elasticsearch
   namespace: elk              ------> here using before created namespace
   labels:
      component: elasticsearch
spec:
   type: LoadBalancer
   selector:
      component: elasticsearch
   ports:
   - name: http
      port: 9200
      protocol: TCP
   - name: transport
      port: 9300
      protocol: TCP

-------------------------------------------------------------------------------------------------
kubectl get namespace/ns                           = show the default namespaces
kubectl create namespace <name>                    = create new namespace 
kubectl -n kube-system get pods                    = get details of the existed namespace(kube-system)
kubectl create â€“f <namespace.yml>                  = create namespace by yaml
kubectl describe namespace <Namespace name>        = to describe the namespace
kubectl describe namespace <Namespace name>        = delete namespace


--------------------------------------------------------------------------------------------------
________________________________________________________________________________________________________________________________________
     creat contexts
________________________________________________________________________________________________________________________________________








-----------------------------------------------------------------------------------------------------
kubectl config get-contexts                             = show the default context

kubectl config set-context <name> --namespace=kube-system --user=kubernetes-admin --cluster=kubernetes        = create new context

kubectl config current-context                          = show the current used context
kubectl config use-context <name1>                      = switch to other context 

 ----------------------------------------------------|
         short cuts commands creat                   |
-----------------------------------------------------|
   | alias kcc='kubectl config current-context' |    |
   | alias kuc='kubectl config use-context'     |    |
                                                     |
   [ kubectl config current-context = kcc  |         |
   [ kubectl use-context = kuc             |         |
                                                     |
-----------------------------------------------------|





________________________________________________________________________________________________________________________________________
            create daemonSet.yaml
________________________________________________________________________________________________________________________________________

apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: monitoring-daemon 
spec:
  selector:
    metchLabels
      app: monitoring-agent
  template:
    metadata:
      labels:
        app: monitoring-agent
    spec:                        #--> specification
       containers:
       - image: monitoring-daemon
         name: monitoring-agent

------------------------------------------------------------
kubectl create -f daemon.yaml          = create daemonse 
kubectl get daemonsets                 = to view the daemonset pod
kubectl describe daemonset <NAME>      = to view more details of the daemonset


-----------------------------------------------------------------------------------------
_________________________________________________________________________________________
                           create volume.yaml  
_________________________________________________________________________________________
 
apiVersion: v1
kind: persistentVolume
metadata:
  name: pv-volume
spec:
  accessModes:
      - ReadWriteOnce
  capacity:
      storage: 1Gi
  hostPath:                           -----> it can be stored in local
    path: /tmp/data                     
    
    
    
-----------------------------------------------------------------------------------------    
kubectl create -f <file.yaml>                          = create a volume
kubectl get persistentvolume                           = show the volume details


     
-------------------------------------------------------------------------------------------------
_________________________________________
    create persistentvolumeclaim
_________________________________________

apiVersion: v1
kind: persistentvolumeClaim
metadata:
  name: pvc-volume
spec:
  accessModes:
    - ReadWritOnce
  resources:
    requests:
      storage: 200Mi
      
---------------------------------------------------------------------------------------------
kubectl create -f <pvc.yaml>                            = create pvc
kubectl get pvc                                         = to get details
kubectl describe pvc                                    = to get full descripction of the pvc


--------------------------------------------------------------------------------------------
________________________________________
create pod to add volume
________________________________________

apiVersion: v1
kind: Pod
metadata:
  name: busybox
spec:
  volumes:
  - name: host-vol
    persistentVolumeClaim:
      claimName: pvc-volume       ---> attach the name of the pvc 
  containers:
  - name: busybox
    image: busybox
    volumeMounts:
    - name: host-vol             ---> it's mount the same name of volume
      mountPath: /volume-test
      
---------------------------------------------------------------------------------------------

      









